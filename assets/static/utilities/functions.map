{
	"version": 3,
	"file": "../../../../HappyHolsDev/bulma-0.7.1/sass/utilities/functions.css",
	"sources": [
		"../../../../HappyHolsDev/bulma-0.7.1/sass/utilities/functions.sass"
	],
	"sourcesContent": [
		"@function mergeColorMaps($bulma-colors, $custom-colors) {\n  // we return at least bulma hardcoded colors\n  $merged-colors: $bulma-colors;\n\n  // we want a map as input\n  @if type-of($custom-colors) == 'map' {\n    @each $name, $components in $custom-colors {\n      // color name should be a string and colors pair a list with at least one element\n      @if type-of($name) == 'string' and (type-of($components) == 'list' or type-of($components) == 'color') and length($components) >= 1 {\n        $color-base: null;\n\n        // the param can either be a single color\n        // or a list of 2 colors\n        @if type-of($components) == 'color' {\n          $color-base: $components; }\n        @else if type-of($components) == 'list' {\n          $color-base: nth($components, 1); }\n\n        $color-invert: null;\n        // is an inverted color provided in the list\n        @if length($components) > 1 {\n          $color-invert: nth($components, 2); }\n\n        // we only want a color as base color\n        @if type-of($color-base) == 'color' {\n          // if inverted color is not provided or is not a color we compute it\n          @if type-of($color-invert) != 'color' {\n            $color-invert: findColorInvert($color-base); }\n\n          // we merge this colors elements as map with bulma colors (we can override them this way, no multiple definition for the same name)\n          $merged-colors: map_merge($merged-colors, ($name: ($color-base, $color-invert))); } } } }\n\n  @return $merged-colors; }\n\n@function powerNumber($number, $exp) {\n  $value: 1;\n  @if $exp > 0 {\n    @for $i from 1 through $exp {\n      $value: $value * $number; } }\n  @else if $exp < 0 {\n    @for $i from 1 through -$exp {\n      $value: $value / $number; } }\n  @return $value; }\n\n@function colorLuminance($color) {\n  $color-rgb: ('red': red($color),'green': green($color),'blue': blue($color));\n  @each $name, $value in $color-rgb {\n    $adjusted: 0;\n    $value: $value / 255;\n    @if $value < 0.03928 {\n      $value: $value / 12.92; }\n    @else {\n      $value: ($value + .055) / 1.055;\n      $value: powerNumber($value, 2); }\n    $color-rgb: map-merge($color-rgb, ($name: $value)); }\n  @return (map-get($color-rgb, 'red') * .2126) + (map-get($color-rgb, 'green') * .7152) + (map-get($color-rgb, 'blue') * .0722); }\n\n@function findColorInvert($color) {\n  @if (colorLuminance($color) > 0.55) {\n    @return rgba(#000, 0.7); }\n  @else {\n    @return #fff; } }\n"
	],
	"mappings": "",
	"names": []
}